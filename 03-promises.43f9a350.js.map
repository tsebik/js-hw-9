{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEeC,SAASC,cAAc,SAE/BC,iBAAiB,UAMxB,SAAoBC,GAClBA,EAAIC,iBAEJ,MAAMC,SAAEA,GAAaF,EAAIG,eAEnBC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAChCK,EAAcC,OAAOF,EAAOG,OAC5BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAuBH,OAAOJ,EAAMK,OAOtC,SAA0BG,EAAaC,GACrC,IAAIC,EAAW,KACf,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAaG,IAC3BA,EAAI,IACNF,GAAwBH,GAE1BI,GAAY,EACZE,EAAcF,EAAUD,GACrBI,MAAK,EAACC,SAAEA,EAAUC,UAAAC,MACjBC,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBL,QAAiBE,UAGzCI,OAAM,EAACN,SAAEA,EAAUC,UAAAM,MAClBJ,EAAA1B,GAAS2B,OAAOI,QACd,sBAAoBR,QAAeO,UApB3CE,CAAiBpB,EAAaI,GAE9BX,EAAI4B,OAAOC,WAhBb,IAAItB,EAAc,KACdG,EAAY,KACZC,EAAuB,KAsC3B,SAASK,EAAcE,EAAUY,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEjB,EAAUC,UAAAW,IAEpBM,EAAO,C,SAAElB,EAAUC,UAAAW,MAEpBA","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', setPromise);\n\nlet amountValue = null;\nlet delayTime = null;\nlet firstDelayInputValue = null;\n\nfunction setPromise(evt) {\n  evt.preventDefault();\n\n  const { elements } = evt.currentTarget;\n\n  const { delay, step, amount } = elements;\n  amountValue = Number(amount.value);\n  delayTime = Number(step.value);\n  firstDelayInputValue = Number(delay.value);\n\n  generatePromises(amountValue, firstDelayInputValue);\n\n  evt.target.reset();\n}\n\nfunction generatePromises(amountValue, firstDelayInputValue) {\n  let position = null;\n  for (let i = 0; i < amountValue; i++) {\n    if (i > 0) {\n      firstDelayInputValue += delayTime;\n    }\n    position += 1;\n    createPromise(position, firstDelayInputValue)\n      .then(({ position, delayTime }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delayTime}ms`\n        );\n      })\n      .catch(({ position, delayTime }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delayTime}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delayTime) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delayTime });\n      } else {\n        reject({ position, delayTime });\n      }\n    }, delayTime);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","elements","currentTarget","delay","step","amount","$47d4ff9957288465$var$amountValue","Number","value","$47d4ff9957288465$var$delayTime","$47d4ff9957288465$var$firstDelayInputValue","amountValue1","firstDelayInputValue1","position1","i","$47d4ff9957288465$var$createPromise","then","position","delayTime","delayTime1","$parcel$interopDefault","Notify","success","catch","delayTime2","failure","$47d4ff9957288465$var$generatePromises","target","reset","delayTime3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.43f9a350.js.map"}